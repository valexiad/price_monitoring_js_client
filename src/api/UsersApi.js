/*
 * Price Monitoring Service
 * Price Monitoring Service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {PatchedTrackItemHeader} from '../model/PatchedTrackItemHeader';
import {TrackItemHeader} from '../model/TrackItemHeader';
import {User} from '../model/User';

/**
* Users service.
* @module api/UsersApi
* @version 0.0.1
*/
export class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback moduleapi/UsersApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a user instance.  list:     Return all users, ordered by most recently joined.  create:     Create a new user.  delete:     Remove an existing user.  partial_update:     Update one or more fields on an existing user.  update:     Update a user.
     * @param {module:model/User} body 
     * @param {module:api/UsersApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersCreate(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCreate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersList operation.
     * @callback moduleapi/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a user instance.  list:     Return all users, ordered by most recently joined.  create:     Create a new user.  delete:     Remove an existing user.  partial_update:     Update one or more fields on an existing user.  update:     Update a user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'ordering': opts['ordering']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersRetrieve operation.
     * @callback moduleapi/UsersApi~usersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a user instance.  list:     Return all users, ordered by most recently joined.  create:     Create a new user.  delete:     Remove an existing user.  partial_update:     Update one or more fields on an existing user.  update:     Update a user.
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:api/UsersApi~usersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersRetrieve(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsCreate operation.
     * @callback moduleapi/UsersApi~usersTrackItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackItemHeader{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {module:model/TrackItemHeader} body 
     * @param {String} userId 
     * @param {module:api/UsersApi~usersTrackItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersTrackItemsCreate(body, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersTrackItemsCreate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsCreate");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackItemHeader;

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsDestroy operation.
     * @callback moduleapi/UsersApi~usersTrackItemsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {String} id A UUID string identifying this track item header.
     * @param {String} userId 
     * @param {module:api/UsersApi~usersTrackItemsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersTrackItemsDestroy(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTrackItemsDestroy");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsDestroy");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsList operation.
     * @callback moduleapi/UsersApi~usersTrackItemsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackItemHeader>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {String} userId 
     * @param {module:api/UsersApi~usersTrackItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersTrackItemsList(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsList");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackItemHeader];

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsPartialUpdate operation.
     * @callback moduleapi/UsersApi~usersTrackItemsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackItemHeader{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {String} id A UUID string identifying this track item header.
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTrackItemHeader} opts.body 
     * @param {module:api/UsersApi~usersTrackItemsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersTrackItemsPartialUpdate(id, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTrackItemsPartialUpdate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsPartialUpdate");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackItemHeader;

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsRetrieve operation.
     * @callback moduleapi/UsersApi~usersTrackItemsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackItemHeader{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {String} id A UUID string identifying this track item header.
     * @param {String} userId 
     * @param {module:api/UsersApi~usersTrackItemsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersTrackItemsRetrieve(id, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTrackItemsRetrieve");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsRetrieve");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackItemHeader;

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersTrackItemsUpdate operation.
     * @callback moduleapi/UsersApi~usersTrackItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackItemHeader{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * retrieve:     Return a track item instance.  list:     Return all track items of the user, ordered by most recently joined.  create:     Create a new track item .  delete:     Remove an existing track item.  partial_update:     Update one or more fields on an existing track item.  update:     Update a track item.
     * @param {module:model/TrackItemHeader} body 
     * @param {String} id A UUID string identifying this track item header.
     * @param {String} userId 
     * @param {module:api/UsersApi~usersTrackItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersTrackItemsUpdate(body, id, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersTrackItemsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTrackItemsUpdate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTrackItemsUpdate");
      }

      let pathParams = {
        'id': id,'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackItemHeader;

      return this.apiClient.callApi(
        '/users/{user_id}/track-items/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}